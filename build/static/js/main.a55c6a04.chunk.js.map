{"version":3,"sources":["HostnamePasswordNotExist.js","HostnamePasswordExist.js","Main.js","Tools.js","PasswordInputNotFound.js","App.js","index.js"],"names":["HostnamePasswordNotExist","useState","password","setPassword","REQ_PASSWORD_CMD","onResponse","msg","req","res","sendMessage","chrome","tabs","query","active","currentWindow","id","requestPassword","cmd","useEffect","className","onClick","params","HostnamePasswordExist","hostname","setHostname","REQ_HOSTNAME_CMD","Main","isHostnamePasswordExist","setIsHostnamePasswordExist","IS_HOSTNAME_PASSWORD_EXIST_CMD","requestIsHostnamePasswordExist","a","b","this","isDigit","randomFloat","isArray","randomArrayElement","isDict","randomDictElement","isString","randomStringChar","min","max","Math","random","floor","arr","length","randomInt","dict","keys","Object","str","charsList","Array","from","isDate","Date","callback","Promise","resolve","reject","err","PasswordInputNotFound","motivation_quotes","Tools","App","passwordInputState","setPasswordInputState","GET_PASSWORD_INPUT_STATE","requestPasswordInputState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a55c6a04.chunk.js","sourcesContent":["/*global chrome*/\r\nimport \"./HostnamePasswordNotExist.css\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction HostnamePasswordNotExist() {\r\n    const [password, setPassword] = useState();\r\n    const REQ_PASSWORD_CMD = \"get-password\";\r\n    const USE_PASSWORD_CMD = \"use-password\";\r\n\r\n    function onResponse(msg) {\r\n      if (msg.req === REQ_PASSWORD_CMD) {\r\n        setPassword(msg.res);\r\n      } \r\n    }\r\n    \r\n    function sendMessage(msg) {\r\n      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n        chrome.tabs.sendMessage(tabs[0].id, msg, onResponse);\r\n      });\r\n    }\r\n  \r\n    function requestPassword() {\r\n      let msg = {cmd: REQ_PASSWORD_CMD};\r\n      sendMessage(msg);\r\n    }\r\n\r\n    function getAnotherPassword() {\r\n      requestPassword();\r\n    }\r\n  \r\n    function usePassword() {\r\n        let msg = {cmd: USE_PASSWORD_CMD, params: {password}};\r\n        sendMessage(msg);        \r\n    }\r\n\r\n    useEffect(() => {\r\n      requestPassword();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <p>Secure Password :</p>\r\n            <p className=\"suggested-password primary-color\"> {password} </p>\r\n            <div className=\"horizontal-wrap\">\r\n              <button onClick={getAnotherPassword}>Another</button>\r\n              <button className=\"initial-button\" onClick={usePassword}>Use it</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HostnamePasswordNotExist;","/*global chrome*/\r\nimport \"./HostnamePasswordExist.css\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction HostnamePasswordExist() {\r\n    const [hostname, setHostname] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    const REQ_HOSTNAME_CMD = \"get-current-hostname\";\r\n    const REQ_PASSWORD_CMD = \"get-saved-password-for-current-hostname\";\r\n    const USE_PASSWORD_CMD = \"use-password\";\r\n\r\n    function usePassword() {\r\n      let msg = {cmd: USE_PASSWORD_CMD, params: {password}};\r\n      sendMessage(msg);        \r\n    }\r\n\r\n    function onResponse(msg) {\r\n      if (msg?.req === REQ_PASSWORD_CMD) {\r\n        setPassword(msg.res);\r\n      } else if (msg?.req === REQ_HOSTNAME_CMD) {\r\n        setHostname(msg.res);       \r\n      }\r\n    }\r\n    \r\n    function sendMessage(msg) {\r\n      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n        chrome.tabs.sendMessage(tabs[0].id, msg, onResponse);\r\n        return true;\r\n      });\r\n    }\r\n  \r\n    function requestPassword() {\r\n      let msg = {cmd: REQ_PASSWORD_CMD};\r\n      sendMessage(msg);\r\n    }\r\n\r\n    function requestHostname() {\r\n      let msg = {cmd: REQ_HOSTNAME_CMD};\r\n      sendMessage(msg);\r\n    }\r\n\r\n    useEffect(() => {\r\n      requestHostname();\r\n      requestPassword();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <p>Saved password detected for: <h1 className=\"primary-color\"> {hostname} </h1></p>\r\n            <div className=\"horizontal-wrap\"> \r\n              <button className=\"initial-button\" onClick={usePassword}>Use it</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HostnamePasswordExist;","/*global chrome*/\r\nimport \"./Main.css\";\r\nimport HostnamePasswordNotExist from \"./HostnamePasswordNotExist.js\";\r\nimport HostnamePasswordExist from \"./HostnamePasswordExist.js\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Main() {\r\n    const [isHostnamePasswordExist, setIsHostnamePasswordExist] = useState();\r\n    const IS_HOSTNAME_PASSWORD_EXIST_CMD = \"is-hostname-saved\";\r\n    function onResponse(msg) {\r\n      if (msg.req === IS_HOSTNAME_PASSWORD_EXIST_CMD) {\r\n        setIsHostnamePasswordExist(msg.res);\r\n      } \r\n    }\r\n    \r\n    function sendMessage(msg) {\r\n      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n        chrome.tabs.sendMessage(tabs[0].id, msg, onResponse);\r\n      });\r\n    }\r\n  \r\n    function requestIsHostnamePasswordExist() {\r\n      let msg = {cmd: IS_HOSTNAME_PASSWORD_EXIST_CMD};\r\n      sendMessage(msg);\r\n    }\r\n\r\n    useEffect(() => {\r\n      requestIsHostnamePasswordExist();\r\n    }, [])\r\n\r\n    return (\r\n        <main>\r\n            {isHostnamePasswordExist \r\n               ? <HostnamePasswordExist />\r\n               : <HostnamePasswordNotExist />\r\n            }\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","class Tools {\r\n    random(a, b) {\r\n        if (this.isDigit(a)) {\r\n            return this.randomFloat(a, b);\r\n        } else if (this.isArray(a)) {\r\n            return this.randomArrayElement(a);\r\n        } else if (this.isDict(a)) { \r\n            return this.randomDictElement(a);\r\n        } else if (this.isString(a)) {\r\n            return this.randomStringChar(a);\r\n        }\r\n    }\r\n    \r\n    randomFloat(min=0, max=0) {\r\n        return Math.random() * (max - min + 1) + min;\r\n    }\r\n    \r\n    randomInt(min=0, max=0) {\r\n        return Math.floor(this.randomFloat(min, max));\r\n    }\r\n    \r\n    randomArrayElement(arr) {\r\n        const max = arr.length - 1;\r\n        const elementIndex = this.randomInt(0, max);\r\n        return arr[elementIndex];\r\n    }\r\n    \r\n    randomDictElement(dict) {\r\n        const keys = Object.keys(dict);\r\n        const key = this.randomArrayElement(keys);\r\n        return dict[key];\r\n    }\r\n    \r\n    randomStringChar(str) {\r\n        const charsList = Array.from(str);\r\n        const char = this.randomArrayElement(charsList);\r\n        return char;\r\n    }\r\n    \r\n    isDigit(a) {\r\n        return typeof a == 'number';\r\n    }\r\n    \r\n    isArray(a) {\r\n        return a instanceof Array;\r\n    }\r\n    \r\n    isDict(a) {\r\n        return typeof a==='object' && a!==null && !this.isArray(a) && !this.isDate(a);\r\n    }\r\n    \r\n    isString(a) {\r\n        return typeof a == \"string\";\r\n    }\r\n    \r\n    isDate(a) {\r\n        return a instanceof Date;\r\n    }\r\n    \r\n    toPromise(callback) {\r\n        const promise = new Promise((resolve, reject) => {\r\n            try {\r\n                callback(resolve, reject);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport default new Tools();\r\n","import \"./PasswordInputNotFound.css\";\r\nimport Tools from \"./Tools.js\";\r\n\r\nfunction PasswordInputNotFound() {\r\n    const motivation_quotes = [\r\n        \"It’s simple arithmetic: Your income can grow only to the extent that you do\",\r\n        \"The only difference between a rich person and a poor person is how they use their time\",\r\n        \"The more you learn, the more you earn\",\r\n        \"Before you can become a millionaire, you must learn to think like one. You must learn how to motivate yourself to counter fear with courage\",\r\n        \"You can’t work three hours a week and make $100,000. Get rich quick doesn’t work. Crock pot mentality always defeats microwave mentality!\",\r\n        \"All riches have their origin in mind. Wealth is in ideas—not money\",\r\n        \"Empty pockets never held anyone back. Only empty heads and empty hearts can do that\"\r\n    ]\r\n\r\n    function getRandomMotivationQuote() {\r\n        return Tools.random(motivation_quotes);\r\n    }\r\n\r\n    return (\r\n        <div id=\"password-input-not-found-container\" className=\"primary-color-bg\"> \r\n            <p id=\"motivation-quote\"> {getRandomMotivationQuote()} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordInputNotFound;","/*global chrome*/\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Main from './Main.js';\nimport PasswordInputNotFound from './PasswordInputNotFound';\n\nfunction App() {\n  const [passwordInputState, setPasswordInputState] = useState();\n  const GET_PASSWORD_INPUT_STATE = \"get-password-input-state\";\n\n  function onResponse(msg) {\n    if (msg.req === GET_PASSWORD_INPUT_STATE) {\n      setPasswordInputState(msg.res);\n    }\n  }\n  \n  function sendMessage(msg) {\n    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n      chrome.tabs.sendMessage(tabs[0].id, msg, onResponse);\n    });\n  }\n\n  function requestPasswordInputState() {\n    let msg = {cmd: GET_PASSWORD_INPUT_STATE};\n    sendMessage(msg);\n  }\n\n  useEffect(() => {\n    requestPasswordInputState();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {passwordInputState \n        ? <Main />\n        : <PasswordInputNotFound />\n      }\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}